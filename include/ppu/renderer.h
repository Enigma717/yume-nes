#pragma once

#include <SFML/Graphics.hpp>
#include <cstdint>

class PPU;

class Renderer {
public:
    Renderer() = delete;
    Renderer(PPU& ppu_ref);

    void prepare_next_pixel();

    sf::VertexArray frame_buffer {};

private:
    void choose_rendering_mode();
    void dispatch_rendering_mode();
    void render_pre_render_scanline();
    void render_visible_scanline();
    void render_vblank_scanline();
    void process_pixel_rendering();

    void    process_rendering_fetches();
    std::uint8_t fetch_nametable_tile_byte_with_shifters_load();
    std::uint8_t fetch_attribute_table_byte() const;
    std::uint8_t calculate_attribute_shift() const;
    std::uint8_t fetch_tile_plane_byte(std::uint8_t plane_offset = 0x00) const;

    void coarse_x_increment_with_wrapping();
    void coarse_y_increment_with_wrapping();
    void copy_horizontal_scroll_to_address();
    void copy_vertical_scroll_to_address();
    void load_next_tile_data_to_shift_registers();
    void move_shift_registers();

    PPU& ppu_ref;

    enum class RenderingMode {
        pre_render_scanline,
        visible_scanline,
        post_render_scanline,
        vblank_scanline
    };

    RenderingMode rendering_mode {RenderingMode::pre_render_scanline};

    std::uint8_t fetched_nametable_tile_byte {0x00u};
    std::uint8_t fetched_attribute_table_byte {0x00u};
    std::uint8_t fetched_tile_first_plane_byte {0x00u};
    std::uint8_t fetched_tile_second_plane_byte {0x00u};

    std::uint16_t tile_data_first_shift_reg {0x0000u};
    std::uint16_t tile_data_second_shift_reg {0x0000u};
    std::uint16_t data_multiplexer {0x0000u};
};


namespace PPUColors
{
    static const std::vector<sf::Color> available_colors {
        {0x7Cu, 0x7Cu, 0x7Cu}, {0x00u, 0x00u, 0xFCu},
        {0x00u, 0x00u, 0xBCu}, {0x44u, 0x28u, 0xBCu},
        {0x94u, 0x00u, 0x84u}, {0xA8u, 0x00u, 0x20u},
        {0xA8u, 0x10u, 0x00u}, {0x88u, 0x14u, 0x00u},
        {0x50u, 0x30u, 0x00u}, {0x00u, 0x78u, 0x00u},
        {0x00u, 0x68u, 0x00u}, {0x00u, 0x58u, 0x00u},
        {0x00u, 0x40u, 0x58u}, {0x00u, 0x00u, 0x00u},
        {0x00u, 0x00u, 0x00u}, {0x00u, 0x00u, 0x00u},
        {0xBCu, 0xBCu, 0xBCu}, {0x00u, 0x78u, 0xF8u},
        {0x00u, 0x58u, 0xF8u}, {0x68u, 0x44u, 0xFCu},
        {0xD8u, 0x00u, 0xCCu}, {0xE4u, 0x00u, 0x58u},
        {0xF8u, 0x38u, 0x00u}, {0xE4u, 0x5Cu, 0x10u},
        {0xACu, 0x7Cu, 0x00u}, {0x00u, 0xB8u, 0x00u},
        {0x00u, 0xA8u, 0x00u}, {0x00u, 0xA8u, 0x44u},
        {0x00u, 0x88u, 0x88u}, {0x00u, 0x00u, 0x00u},
        {0x00u, 0x00u, 0x00u}, {0x00u, 0x00u, 0x00u},
        {0xF8u, 0xF8u, 0xF8u}, {0x3Cu, 0xBCu, 0xFCu},
        {0x68u, 0x88u, 0xFCu}, {0x98u, 0x78u, 0xF8u},
        {0xF8u, 0x78u, 0xF8u}, {0xF8u, 0x58u, 0x98u},
        {0xF8u, 0x78u, 0x58u}, {0xFCu, 0xA0u, 0x44u},
        {0xF8u, 0xB8u, 0x00u}, {0xB8u, 0xF8u, 0x18u},
        {0x58u, 0xD8u, 0x54u}, {0x58u, 0xF8u, 0x98u},
        {0x00u, 0xE8u, 0xD8u}, {0x78u, 0x78u, 0x78u},
        {0x00u, 0x00u, 0x00u}, {0x00u, 0x00u, 0x00u},
        {0xFCu, 0xFCu, 0xFCu}, {0xA4u, 0xE4u, 0xFCu},
        {0xB8u, 0xB8u, 0xF8u}, {0xD8u, 0xB8u, 0xF8u},
        {0xF8u, 0xB8u, 0xF8u}, {0xF8u, 0xA4u, 0xC0u},
        {0xF0u, 0xD0u, 0xB0u}, {0xFCu, 0xE0u, 0xA8u},
        {0xF8u, 0xD8u, 0x78u}, {0xD8u, 0xF8u, 0x78u},
        {0xB8u, 0xF8u, 0xB8u}, {0xB8u, 0xF8u, 0xD8u},
        {0x00u, 0xFCu, 0xFCu}, {0xF8u, 0xD8u, 0xF8u},
        {0x00u, 0x00u, 0x00u}, {0x00u, 0x00u, 0x00u}
    };
}
