#pragma once

#include <SFML/Graphics.hpp>


class PPU;


class Renderer {
private:
    Renderer() = delete;
    Renderer(PPU& ppu_ref);


    PPU& ppu_ref;

    enum class RenderingMode {
        pre_render_scanline,
        visible_scanline,
        post_render_scanline,
        vblank_scanline
    };

    RenderingMode rendering_mode {RenderingMode::pre_render_scanline};
    std::vector<sf::RectangleShape> frame_buffer {};

    uint8_t fetched_nametable_tile_byte {0x00};
    uint8_t fetched_attribute_table_byte {0x00};
    uint8_t fetched_tile_first_plane_byte {0x00};
    uint8_t fetched_tile_second_plane_byte {0x00};

    uint16_t tile_data_first_shift_reg {0x0000};
    uint16_t tile_data_second_shift_reg {0x0000};
    uint16_t data_multiplexer {0x0000};


    void prepare_next_pixel();
    void choose_rendering_mode();
    void dispatch_rendering_mode();
    void render_pre_render_scanline();
    void render_visible_scanline();
    void render_vblank_scanline();
    void process_pixel_rendering();

    void    process_rendering_fetches();
    uint8_t fetch_nametable_tile_byte_with_shifters_load();
    uint8_t fetch_attribute_table_byte() const;
    uint8_t calculate_attribute_shift() const;
    uint8_t fetch_tile_plane_byte(uint8_t plane_offset = 0x00) const;

    void coarse_x_increment_with_wrapping();
    void coarse_y_increment_with_wrapping();
    void copy_horizontal_scroll_to_address();
    void copy_vertical_scroll_to_address();
    void load_next_tile_data_to_shift_registers();
    void move_shift_registers();


    friend class PPU;
};


namespace PPUColors
{
    static const std::vector<sf::Color> available_colors {
        {0x7C, 0x7C, 0x7C}, {0x00, 0x00, 0xFC}, {0x00, 0x00, 0xBC}, {0x44, 0x28, 0xBC},
        {0x94, 0x00, 0x84}, {0xA8, 0x00, 0x20}, {0xA8, 0x10, 0x00}, {0x88, 0x14, 0x00},
        {0x50, 0x30, 0x00}, {0x00, 0x78, 0x00}, {0x00, 0x68, 0x00}, {0x00, 0x58, 0x00},
        {0x00, 0x40, 0x58}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00},
        {0xBC, 0xBC, 0xBC}, {0x00, 0x78, 0xF8}, {0x00, 0x58, 0xF8}, {0x68, 0x44, 0xFC},
        {0xD8, 0x00, 0xCC}, {0xE4, 0x00, 0x58}, {0xF8, 0x38, 0x00}, {0xE4, 0x5C, 0x10},
        {0xAC, 0x7C, 0x00}, {0x00, 0xB8, 0x00}, {0x00, 0xA8, 0x00}, {0x00, 0xA8, 0x44},
        {0x00, 0x88, 0x88}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00},
        {0xF8, 0xF8, 0xF8}, {0x3C, 0xBC, 0xFC}, {0x68, 0x88, 0xFC}, {0x98, 0x78, 0xF8},
        {0xF8, 0x78, 0xF8}, {0xF8, 0x58, 0x98}, {0xF8, 0x78, 0x58}, {0xFC, 0xA0, 0x44},
        {0xF8, 0xB8, 0x00}, {0xB8, 0xF8, 0x18}, {0x58, 0xD8, 0x54}, {0x58, 0xF8, 0x98},
        {0x00, 0xE8, 0xD8}, {0x78, 0x78, 0x78}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00},
        {0xFC, 0xFC, 0xFC}, {0xA4, 0xE4, 0xFC}, {0xB8, 0xB8, 0xF8}, {0xD8, 0xB8, 0xF8},
        {0xF8, 0xB8, 0xF8}, {0xF8, 0xA4, 0xC0}, {0xF0, 0xD0, 0xB0}, {0xFC, 0xE0, 0xA8},
        {0xF8, 0xD8, 0x78}, {0xD8, 0xF8, 0x78}, {0xB8, 0xF8, 0xB8}, {0xB8, 0xF8, 0xD8},
        {0x00, 0xFC, 0xFC}, {0xF8, 0xD8, 0xF8}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}
    };
}
